From 73383273c878a89f082e601ae825c636970df44b Mon Sep 17 00:00:00 2001
From: Mario Limonciello <superm1@gmail.com>
Date: Sat, 16 Dec 2023 21:37:08 -0600
Subject: [PATCH 1/4] update gitignore

---
 .gitignore | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/.gitignore b/.gitignore
index b8dbfe9..80f294d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,4 @@
 power-profiles-daemon
 data/net.hadess.PowerProfiles.conf
+__pycache__
+.vscode
-- 
GitLab


From acb281b8f7a1fde1402eba125ba069694f0a651c Mon Sep 17 00:00:00 2001
From: Mario Limonciello <superm1@gmail.com>
Date: Sun, 17 Dec 2023 08:25:47 -0600
Subject: [PATCH 2/4] docs: Remove references to files that don't exist

---
 docs/meson.build | 2 --
 1 file changed, 2 deletions(-)

diff --git a/docs/meson.build b/docs/meson.build
index 4de0210..43c22e3 100644
--- a/docs/meson.build
+++ b/docs/meson.build
@@ -21,13 +21,11 @@ content_files += gnome.gdbus_codegen(
 private_headers = [
   'power-profiles-daemon.h',
   'ppd-action-trickle-charge.h',
-  'ppd-driver-balanced.h',
   'ppd-driver-fake.h',
   'ppd-driver-intel-pstate.h',
   'ppd-driver-amd-pstate.h',
   'ppd-driver-placeholder.h',
   'ppd-driver-platform-profile.h',
-  'ppd-driver-power-saver.h',
   'ppd-utils.h',
   'power-profiles-daemon-resources.h',
 ]
-- 
GitLab


From f2f910c8642c1c8a42ed23e55852ee0cf5290cef Mon Sep 17 00:00:00 2001
From: Mario Limonciello <superm1@gmail.com>
Date: Sun, 17 Dec 2023 08:40:42 -0600
Subject: [PATCH 3/4] tests: Split immutable control into a test helper

---
 tests/integration-test.py | 28 ++++++++++++++++------------
 1 file changed, 16 insertions(+), 12 deletions(-)

diff --git a/tests/integration-test.py b/tests/integration-test.py
index 8e37f69..549ef94 100755
--- a/tests/integration-test.py
+++ b/tests/integration-test.py
@@ -247,6 +247,18 @@ class Tests(dbusmock.DBusTestCase):
             return f.read()
         return None
 
+    def change_immutable(self, f, enable):
+      s = '-'
+      if enable:
+        os.chmod(f, 0o444)
+        s = '+'
+      if os.geteuid() == 0:
+        if not GLib.find_program_in_path('chattr'):
+          os._exit(77)
+        subprocess.check_output(['chattr', '%si' % s, f])
+      if not enable:
+        os.chmod(f, 0o666)
+
     def create_dytc_device(self):
       self.tp_acpi = self.testbed.add_device('platform', 'thinkpad_acpi', None,
           ['dytc_lapmode', '0\n'],
@@ -491,10 +503,7 @@ class Tests(dbusmock.DBusTestCase):
         prefs.write("balance_performance\n")
       os.umask(old_umask)
       # Make file non-writable to root
-      if os.geteuid() == 0:
-        if not GLib.find_program_in_path('chattr'):
-          os._exit(77)
-        subprocess.check_output(['chattr', '+i', pref_path])
+      self.change_immutable(pref_path, True)
 
       self.start_daemon()
 
@@ -512,8 +521,7 @@ class Tests(dbusmock.DBusTestCase):
 
       self.stop_daemon()
 
-      if os.geteuid() == 0:
-        subprocess.check_output(['chattr', '-i', pref_path])
+      self.change_immutable(pref_path, False)
 
     def test_intel_pstate_passive(self):
       '''Intel P-State in passive mode -> placeholder'''
@@ -719,10 +727,7 @@ class Tests(dbusmock.DBusTestCase):
         prefs.write("balance_performance\n")
       os.umask(old_umask)
       # Make file non-writable to root
-      if os.geteuid() == 0:
-        if not GLib.find_program_in_path('chattr'):
-          os._exit(77)
-        subprocess.check_output(['chattr', '+i', pref_path])
+      self.change_immutable(pref_path, True)
 
       self.start_daemon()
 
@@ -740,8 +745,7 @@ class Tests(dbusmock.DBusTestCase):
 
       self.stop_daemon()
 
-      if os.geteuid() == 0:
-        subprocess.check_output(['chattr', '-i', pref_path])
+      self.change_immutable(pref_path, False)
 
     def test_amd_pstate_passive(self):
       '''AMD P-State in passive mode -> placeholder'''
-- 
GitLab


From c985660cf66a9d361ac19da71dc97358e82a7aa7 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <superm1@gmail.com>
Date: Sat, 16 Dec 2023 01:24:16 -0600
Subject: [PATCH 4/4] Allow both CPU and platform drivers to be simultaneously
 active

This is done by designating all drivers as CPU drivers or platform drivers.
One of each driver can be active at any given time.

When setting an active profile CPU driver is set first as this is less likely to have
failures. If failures occur setting the platform driver then the CPU driver is undone.

If both profiles are degraded then the string for the reason from both drivers will be
comma separated to be compatible with existing API and users.

This is leveraged from https://gitlab.freedesktop.org/upower/power-profiles-daemon/-/merge_requests/123
---
 docs/power-profiles-daemon-docs.xml     |   2 +
 docs/power-profiles-daemon-sections.txt |  14 ++
 src/meson.build                         |   2 +
 src/power-profiles-daemon.c             | 168 +++++++++++++++++-------
 src/powerprofilesctl.in                 |   6 +-
 src/ppd-driver-amd-pstate.c             |   4 +-
 src/ppd-driver-amd-pstate.h             |   4 +-
 src/ppd-driver-cpu.c                    |  46 +++++++
 src/ppd-driver-cpu.h                    |  27 ++++
 src/ppd-driver-fake.c                   |   4 +-
 src/ppd-driver-fake.h                   |   4 +-
 src/ppd-driver-intel-pstate.c           |   6 +-
 src/ppd-driver-intel-pstate.h           |   4 +-
 src/ppd-driver-placeholder.c            |   4 +-
 src/ppd-driver-placeholder.h            |   4 +-
 src/ppd-driver-platform-profile.c       |   2 +-
 src/ppd-driver-platform-profile.h       |   4 +-
 src/ppd-driver-platform.c               |  56 ++++++++
 src/ppd-driver-platform.h               |  29 ++++
 src/ppd-driver.c                        |  59 ++++-----
 src/ppd-driver.h                        |   5 +-
 tests/integration-test.py               | 149 +++++++++++++++++----
 22 files changed, 473 insertions(+), 130 deletions(-)
 create mode 100644 src/ppd-driver-cpu.c
 create mode 100644 src/ppd-driver-cpu.h
 create mode 100644 src/ppd-driver-platform.c
 create mode 100644 src/ppd-driver-platform.h

diff --git a/docs/power-profiles-daemon-docs.xml b/docs/power-profiles-daemon-docs.xml
index 0a2c627..f2801b5 100644
--- a/docs/power-profiles-daemon-docs.xml
+++ b/docs/power-profiles-daemon-docs.xml
@@ -70,6 +70,8 @@
     <title>Internal API</title>
     <xi:include href="xml/ppd-profile.xml"/>
     <xi:include href="xml/ppd-driver.xml"/>
+    <xi:include href="xml/ppd-driver-cpu.xml"/>
+    <xi:include href="xml/ppd-driver-platform.xml"/>
     <xi:include href="xml/ppd-action.xml"/>
   </reference>
 
diff --git a/docs/power-profiles-daemon-sections.txt b/docs/power-profiles-daemon-sections.txt
index 0063310..078578c 100644
--- a/docs/power-profiles-daemon-sections.txt
+++ b/docs/power-profiles-daemon-sections.txt
@@ -18,6 +18,20 @@ PpdProfileActivationReason
 PPD_TYPE_DRIVER
 </SECTION>
 
+<SECTION>
+<FILE>ppd-driver-cpu</FILE>
+<TITLE>CPU Profile Drivers</TITLE>
+PpdDriverCpuClass
+PpdDriverCpu
+</SECTION>
+
+<SECTION>
+<FILE>ppd-driver-platform</FILE>
+<TITLE>Platform Profile Drivers</TITLE>
+PpdDriverPlatformClass
+PpdDriverPlatform
+</SECTION>
+
 <SECTION>
 <FILE>ppd-profile</FILE>
 <TITLE>Constants</TITLE>
diff --git a/src/meson.build b/src/meson.build
index 6cf5113..ea4073b 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -19,6 +19,8 @@ sources = [
   'ppd-utils.c',
   'ppd-action.c',
   'ppd-driver.c',
+  'ppd-driver-cpu.c',
+  'ppd-driver-platform.c',
   resources,
 ]
 
diff --git a/src/power-profiles-daemon.c b/src/power-profiles-daemon.c
index 2a3c26b..2599670 100644
--- a/src/power-profiles-daemon.c
+++ b/src/power-profiles-daemon.c
@@ -15,7 +15,8 @@
 
 #include "power-profiles-daemon-resources.h"
 #include "power-profiles-daemon.h"
-#include "ppd-driver.h"
+#include "ppd-driver-cpu.h"
+#include "ppd-driver-platform.h"
 #include "ppd-action.h"
 #include "ppd-enums.h"
 
@@ -39,7 +40,8 @@ typedef struct {
   PpdProfile active_profile;
   PpdProfile selected_profile;
   GPtrArray *probed_drivers;
-  PpdDriver *driver;
+  PpdDriverCpu *cpu_driver;
+  PpdDriverPlatform *platform_driver;
   GPtrArray *actions;
   GHashTable *profile_holds;
 } PpdApp;
@@ -67,9 +69,6 @@ static PpdApp *ppd_app = NULL;
 static void stop_profile_drivers (PpdApp *data);
 static void start_profile_drivers (PpdApp *data);
 
-#define GET_DRIVER(p) (ppd_driver_get_profiles (data->driver) & p ? data->driver : NULL)
-#define ACTIVE_DRIVER (data->driver)
-
 /* profile drivers and actions */
 #include "ppd-action-trickle-charge.h"
 #include "ppd-driver-placeholder.h"
@@ -105,14 +104,21 @@ typedef enum {
 
 #define PROP_ALL (PROP_ACTIVE_PROFILE | PROP_INHIBITED | PROP_PROFILES | PROP_ACTIONS | PROP_DEGRADED | PROP_ACTIVE_PROFILE_HOLDS)
 
+static gboolean
+driver_profile_support(PpdDriver *driver,
+                       PpdProfile profile)
+{
+  if (!PPD_IS_DRIVER (driver))
+    return FALSE;
+  return (ppd_driver_get_profiles (driver) & profile) != 0;
+}
+
 static gboolean
 get_profile_available (PpdApp     *data,
                        PpdProfile  profile)
 {
-    PpdDriver *driver;
-
-    driver = GET_DRIVER(profile);
-    return driver != NULL;
+  return driver_profile_support (PPD_DRIVER(data->cpu_driver), profile) ||
+         driver_profile_support (PPD_DRIVER(data->platform_driver), profile);
 }
 
 static const char *
@@ -121,18 +127,22 @@ get_active_profile (PpdApp *data)
   return ppd_profile_to_str (data->active_profile);
 }
 
-static const char *
+static char *
 get_performance_degraded (PpdApp *data)
 {
-  const char *ret;
-  PpdDriver *driver;
-
-  driver = GET_DRIVER(PPD_PROFILE_PERFORMANCE);
-  if (!driver)
-    return "";
-  ret = ppd_driver_get_performance_degraded (driver);
-  g_assert (ret != NULL);
-  return ret;
+  const gchar *cpu_degraded = "";
+  const gchar *platform_degraded = "";
+
+  if (driver_profile_support(PPD_DRIVER(data->platform_driver), PPD_PROFILE_PERFORMANCE))
+    platform_degraded = ppd_driver_get_performance_degraded (PPD_DRIVER(data->platform_driver));
+  if (driver_profile_support(PPD_DRIVER(data->cpu_driver), PPD_PROFILE_PERFORMANCE))
+    cpu_degraded = ppd_driver_get_performance_degraded (PPD_DRIVER(data->cpu_driver));
+
+  if (g_strcmp0(cpu_degraded, "") == 0)
+    return g_strdup(platform_degraded);
+  if (g_strcmp0(platform_degraded, "") == 0)
+    return g_strdup(cpu_degraded);
+  return g_strdup_printf("%s,%s", cpu_degraded, platform_degraded);
 }
 
 static GVariant *
@@ -144,17 +154,24 @@ get_profiles_variant (PpdApp *data)
   g_variant_builder_init (&builder, G_VARIANT_TYPE ("aa{sv}"));
 
   for (i = 0; i < NUM_PROFILES; i++) {
-    PpdDriver *driver = GET_DRIVER(1 << i);
+    PpdDriver *platform_driver = PPD_DRIVER(data->platform_driver);
+    PpdDriver *cpu_driver = PPD_DRIVER(data->cpu_driver);
+    PpdProfile profile = 1 << i;
     GVariantBuilder asv_builder;
 
-    if (driver == NULL)
+    /* check if any of the drivers support */
+    if (!get_profile_available(data, profile))
       continue;
 
     g_variant_builder_init (&asv_builder, G_VARIANT_TYPE ("a{sv}"));
     g_variant_builder_add (&asv_builder, "{sv}", "Profile",
-                           g_variant_new_string (ppd_profile_to_str (1 << i)));
-    g_variant_builder_add (&asv_builder, "{sv}", "Driver",
-                           g_variant_new_string (ppd_driver_get_driver_name (driver)));
+                           g_variant_new_string (ppd_profile_to_str (profile)));
+    if (driver_profile_support(cpu_driver, profile))
+      g_variant_builder_add (&asv_builder, "{sv}", "CpuDriver",
+                             g_variant_new_string (ppd_driver_get_driver_name (cpu_driver)));
+    if (driver_profile_support(PPD_DRIVER(data->platform_driver), profile))
+      g_variant_builder_add (&asv_builder, "{sv}", "PlatformDriver",
+                             g_variant_new_string (ppd_driver_get_driver_name (platform_driver)));
 
     g_variant_builder_add (&builder, "a{sv}", &asv_builder);
   }
@@ -231,8 +248,9 @@ send_dbus_event (PpdApp     *data,
                            g_variant_new_string (""));
   }
   if (mask & PROP_DEGRADED) {
+    g_autofree gchar *degraded = get_performance_degraded (data);
     g_variant_builder_add (&props_builder, "{sv}", "PerformanceDegraded",
-                           g_variant_new_string (get_performance_degraded (data)));
+                           g_variant_new_string (degraded));
   }
   if (mask & PROP_PROFILES) {
     g_variant_builder_add (&props_builder, "{sv}", "Profiles",
@@ -264,7 +282,10 @@ save_configuration (PpdApp *data)
 {
   g_autoptr(GError) error = NULL;
 
-  g_key_file_set_string (data->config, "State", "Driver", ppd_driver_get_driver_name (data->driver));
+  if (PPD_IS_DRIVER_CPU(data->cpu_driver))
+    g_key_file_set_string (data->config, "State", "CpuDriver", ppd_driver_get_driver_name (PPD_DRIVER(data->cpu_driver)));
+  if (PPD_IS_DRIVER_PLATFORM(data->platform_driver))
+    g_key_file_set_string (data->config, "State", "PlatformDriver", ppd_driver_get_driver_name (PPD_DRIVER(data->platform_driver)));
   g_key_file_set_string (data->config, "State", "Profile", ppd_profile_to_str (data->active_profile));
   if (!g_key_file_save_to_file (data->config, data->config_path, &error))
     g_warning ("Could not save configuration file '%s': %s", data->config_path, error->message);
@@ -273,12 +294,16 @@ save_configuration (PpdApp *data)
 static gboolean
 apply_configuration (PpdApp *data)
 {
-  g_autofree char *driver = NULL;
+  g_autofree char *platform_driver = NULL;
   g_autofree char *profile_str = NULL;
+  g_autofree char *cpu_driver = NULL;
   PpdProfile profile;
 
-  driver = g_key_file_get_string (data->config, "State", "Driver", NULL);
-  if (g_strcmp0 (ppd_driver_get_driver_name (data->driver), driver) != 0)
+  cpu_driver = g_key_file_get_string (data->config, "State", "CpuDriver", NULL);
+  if (PPD_IS_DRIVER_CPU(data->cpu_driver) && g_strcmp0 (ppd_driver_get_driver_name (PPD_DRIVER(data->cpu_driver)), cpu_driver) != 0)
+    return FALSE;
+  platform_driver = g_key_file_get_string (data->config, "State", "PlatformDriver", NULL);
+  if (PPD_IS_DRIVER_PLATFORM(data->platform_driver) && g_strcmp0 (ppd_driver_get_driver_name (PPD_DRIVER(data->platform_driver)), platform_driver) != 0)
     return FALSE;
   profile_str = g_key_file_get_string (data->config, "State", "Profile", NULL);
   if (profile_str == NULL)
@@ -339,18 +364,43 @@ activate_target_profile (PpdApp                      *data,
                          PpdProfileActivationReason   reason,
                          GError                     **error)
 {
-  GError *internal_error = NULL;
+  g_autoptr(GError) recovery_error = NULL;
+  PpdProfile current_profile = data->active_profile;
+  gboolean cpu_set = TRUE;
+  gboolean platform_set = TRUE;
 
   g_debug ("Setting active profile '%s' for reason '%s' (current: '%s')",
            ppd_profile_to_str (target_profile),
            ppd_profile_activation_reason_to_str (reason),
-           ppd_profile_to_str (data->active_profile));
+           ppd_profile_to_str (current_profile));
+
+  /* Try CPU first */
+  if (driver_profile_support(PPD_DRIVER(data->cpu_driver), target_profile))
+    cpu_set = ppd_driver_activate_profile (PPD_DRIVER(data->cpu_driver), target_profile, reason, error);
 
-  if (!ppd_driver_activate_profile (data->driver, target_profile, reason, &internal_error)) {
-    g_warning ("Failed to activate driver '%s': %s",
-               ppd_driver_get_driver_name (data->driver),
-               internal_error->message);
-    g_propagate_error (error, internal_error);
+  if (!cpu_set) {
+    g_prefix_error(error, "Failed to activate CPU driver '%s': ", ppd_driver_get_driver_name (PPD_DRIVER(data->cpu_driver)));
+    return FALSE;
+  }
+
+  /* Then try platform */
+  if (driver_profile_support(PPD_DRIVER(data->platform_driver), target_profile))
+    platform_set = ppd_driver_activate_profile (PPD_DRIVER(data->platform_driver), target_profile, reason, error);
+
+  if (!platform_set) {
+    g_prefix_error(error, "Failed to activate platform driver '%s': ", ppd_driver_get_driver_name (PPD_DRIVER(data->platform_driver)));
+    /* try to recover */
+    if (cpu_set) {
+      g_debug ("Reverting CPU driver '%s' to profile '%s'",
+               ppd_driver_get_driver_name (PPD_DRIVER(data->cpu_driver)),
+               ppd_profile_to_str (current_profile));
+      if (!ppd_driver_activate_profile (PPD_DRIVER(data->cpu_driver), current_profile, PPD_PROFILE_ACTIVATION_REASON_INTERNAL, &recovery_error)) {
+        g_prefix_error(error, "Failed to revert CPU driver '%s': ", ppd_driver_get_driver_name (PPD_DRIVER(data->cpu_driver)));
+        g_warning ("Failed to revert CPU driver '%s': %s",
+                   ppd_driver_get_driver_name (PPD_DRIVER(data->cpu_driver)),
+                   recovery_error->message);
+      }
+    }
     return FALSE;
   }
 
@@ -676,8 +726,10 @@ handle_get_property (GDBusConnection *connection,
     return get_profiles_variant (data);
   if (g_strcmp0 (property_name, "Actions") == 0)
     return get_actions_variant (data);
-  if (g_strcmp0 (property_name, "PerformanceDegraded") == 0)
-    return g_variant_new_string (get_performance_degraded (data));
+  if (g_strcmp0 (property_name, "PerformanceDegraded") == 0) {
+    g_autofree gchar *degraded = get_performance_degraded (data);
+    return g_variant_new_string (degraded);
+  }
   if (g_strcmp0 (property_name, "ActiveProfileHolds") == 0)
     return get_profile_holds_variant (data);
   return NULL;
@@ -789,13 +841,11 @@ bus_acquired_handler (GDBusConnection *connection,
 static gboolean
 has_required_drivers (PpdApp *data)
 {
-  PpdDriver *driver;
-
-  driver = GET_DRIVER (PPD_PROFILE_BALANCED);
-  if (!driver || !G_IS_OBJECT (driver))
+  if (!PPD_IS_DRIVER_CPU(data->cpu_driver) &&
+      !PPD_IS_DRIVER_PLATFORM(data->platform_driver))
     return FALSE;
-  driver = GET_DRIVER (PPD_PROFILE_POWER_SAVER);
-  if (!driver || !G_IS_OBJECT (driver))
+
+  if (!get_profile_available(data, PPD_PROFILE_BALANCED | PPD_PROFILE_POWER_SAVER))
     return FALSE;
 
   return TRUE;
@@ -817,13 +867,15 @@ stop_profile_drivers (PpdApp *data)
   release_all_profile_holds (data);
   g_ptr_array_set_size (data->probed_drivers, 0);
   g_ptr_array_set_size (data->actions, 0);
-  g_clear_object (&data->driver);
+  g_clear_object (&data->cpu_driver);
+  g_clear_object (&data->platform_driver);
 }
 
 static void
 start_profile_drivers (PpdApp *data)
 {
   guint i;
+  g_autoptr(GError) initial_error = NULL;
 
   for (i = 0; i < G_N_ELEMENTS (objects); i++) {
     GObject *object;
@@ -836,9 +888,16 @@ start_profile_drivers (PpdApp *data)
 
       g_debug ("Handling driver '%s'", ppd_driver_get_driver_name (driver));
 
-      if (data->driver != NULL) {
-        g_debug ("Driver '%s' already probed, skipping driver '%s'",
-                 ppd_driver_get_driver_name (data->driver),
+      if (PPD_IS_DRIVER_CPU(data->cpu_driver) && PPD_IS_DRIVER_CPU(driver)) {
+        g_debug ("CPU driver '%s' already probed, skipping driver '%s'",
+                 ppd_driver_get_driver_name (PPD_DRIVER(data->cpu_driver)),
+                 ppd_driver_get_driver_name (driver));
+        continue;
+      }
+
+      if (PPD_IS_DRIVER_PLATFORM(data->platform_driver) && PPD_IS_DRIVER_PLATFORM(driver)) {
+        g_debug ("Platform driver '%s' already probed, skipping driver '%s'",
+                 ppd_driver_get_driver_name (PPD_DRIVER(data->platform_driver)),
                  ppd_driver_get_driver_name (driver));
         continue;
       }
@@ -865,7 +924,12 @@ start_profile_drivers (PpdApp *data)
         continue;
       }
 
-      data->driver = driver;
+      if (PPD_IS_DRIVER_CPU(driver))
+          data->cpu_driver = PPD_DRIVER_CPU(driver);
+      else if (PPD_IS_DRIVER_PLATFORM(driver))
+          data->platform_driver = PPD_DRIVER_PLATFORM(driver);
+      else
+          g_assert_not_reached ();
 
       g_signal_connect (G_OBJECT (driver), "notify::performance-degraded",
                         G_CALLBACK (driver_performance_degraded_changed_cb), data);
@@ -896,7 +960,8 @@ start_profile_drivers (PpdApp *data)
 
   /* Set initial state either from configuration, or using the currently selected profile */
   apply_configuration (data);
-  activate_target_profile (data, data->active_profile, PPD_PROFILE_ACTIVATION_REASON_RESET, NULL);
+  if (!activate_target_profile (data, data->active_profile, PPD_PROFILE_ACTIVATION_REASON_RESET, &initial_error))
+    g_warning("Failed to activate initial profile: %s", initial_error->message);
 
   send_dbus_event (data, PROP_ALL);
 
@@ -972,7 +1037,8 @@ free_app_data (PpdApp *data)
   g_clear_pointer (&data->config, g_key_file_unref);
   g_ptr_array_free (data->probed_drivers, TRUE);
   g_ptr_array_free (data->actions, TRUE);
-  g_clear_object (&data->driver);
+  g_clear_object (&data->cpu_driver);
+  g_clear_object (&data->platform_driver);
   g_hash_table_destroy (data->profile_holds);
 
   g_clear_object (&data->auth);
diff --git a/src/powerprofilesctl.in b/src/powerprofilesctl.in
index b1ea675..6197709 100755
--- a/src/powerprofilesctl.in
+++ b/src/powerprofilesctl.in
@@ -144,7 +144,11 @@ def _list():
             print('')
         marker = '*' if profile['Profile'] == active else ' '
         print(f'{marker} {profile["Profile"]}:')
-        print('    Driver:    ', profile['Driver'])
+        for driver in ['CpuDriver', 'PlatformDriver']:
+            if driver not in profile:
+                continue
+            value = profile[driver]
+            print(f'    {driver}:\t{value}')
         if profile['Profile'] == 'performance':
             print('    Degraded:  ', f'yes ({reason})' if degraded else 'no')
         index += 1
diff --git a/src/ppd-driver-amd-pstate.c b/src/ppd-driver-amd-pstate.c
index 825caca..b0e4fa3 100644
--- a/src/ppd-driver-amd-pstate.c
+++ b/src/ppd-driver-amd-pstate.c
@@ -19,13 +19,13 @@
 
 struct _PpdDriverAmdPstate
 {
-  PpdDriver  parent_instance;
+  PpdDriverCpu  parent_instance;
 
   PpdProfile activated_profile;
   GList *epp_devices; /* GList of paths */
 };
 
-G_DEFINE_TYPE (PpdDriverAmdPstate, ppd_driver_amd_pstate, PPD_TYPE_DRIVER)
+G_DEFINE_TYPE (PpdDriverAmdPstate, ppd_driver_amd_pstate, PPD_TYPE_DRIVER_CPU)
 
 static gboolean ppd_driver_amd_pstate_activate_profile (PpdDriver                   *driver,
                                                         PpdProfile                   profile,
diff --git a/src/ppd-driver-amd-pstate.h b/src/ppd-driver-amd-pstate.h
index c4f1690..926483b 100644
--- a/src/ppd-driver-amd-pstate.h
+++ b/src/ppd-driver-amd-pstate.h
@@ -10,7 +10,7 @@
 
 #pragma once
 
-#include "ppd-driver.h"
+#include "ppd-driver-cpu.h"
 
 #define PPD_TYPE_DRIVER_AMD_PSTATE (ppd_driver_amd_pstate_get_type())
-G_DECLARE_FINAL_TYPE(PpdDriverAmdPstate, ppd_driver_amd_pstate, PPD, DRIVER_AMD_PSTATE, PpdDriver)
+G_DECLARE_FINAL_TYPE(PpdDriverAmdPstate, ppd_driver_amd_pstate, PPD, DRIVER_AMD_PSTATE, PpdDriverCpu)
diff --git a/src/ppd-driver-cpu.c b/src/ppd-driver-cpu.c
new file mode 100644
index 0000000..7982465
--- /dev/null
+++ b/src/ppd-driver-cpu.c
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2023 Mario Limonciello <superm1@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3 as published by
+ * the Free Software Foundation.
+ *
+ */
+
+#include "ppd-driver-cpu.h"
+
+/**
+ * SECTION:ppd-driver-cpu
+ * @Short_description: CPU Drivers
+ * @Title: CPU Profile Drivers
+ *
+ * Profile drivers are the implementation of the different profiles for
+ * the whole system. A driver will need to implement support `power-saver`
+ * and `balanced` at a minimum.
+ *
+ * CPU drivers are typically used to change specifically the CPU efficiency
+ * to match the desired platform state.
+ */
+
+G_DEFINE_TYPE (PpdDriverCpu, ppd_driver_cpu, PPD_TYPE_DRIVER)
+
+static void
+ppd_driver_cpu_finalize (GObject *object)
+{
+  G_OBJECT_CLASS (ppd_driver_cpu_parent_class)->finalize (object);
+}
+
+static void
+ppd_driver_cpu_class_init (PpdDriverCpuClass *klass)
+{
+  GObjectClass *object_class;
+
+  object_class = G_OBJECT_CLASS(klass);
+  object_class->finalize = ppd_driver_cpu_finalize;
+}
+
+static void
+ppd_driver_cpu_init (PpdDriverCpu *self)
+{
+}
+
diff --git a/src/ppd-driver-cpu.h b/src/ppd-driver-cpu.h
new file mode 100644
index 0000000..dde1026
--- /dev/null
+++ b/src/ppd-driver-cpu.h
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2023 Mario Limonciello <superm1@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3 as published by
+ * the Free Software Foundation.
+ *
+ */
+
+#pragma once
+
+#include "ppd-driver.h"
+
+#define PPD_TYPE_DRIVER_CPU (ppd_driver_cpu_get_type())
+G_DECLARE_DERIVABLE_TYPE(PpdDriverCpu, ppd_driver_cpu, PPD, DRIVER_CPU, PpdDriver)
+
+/**
+ * PpdDriverCpuClass:
+ * @parent_class: The parent class.
+ *
+ * New CPU drivers should derive from #PpdDriverCpu and implement
+ * both @probe() and @activate_profile.
+ */
+struct _PpdDriverCpuClass
+{
+  PpdDriverClass   parent_class;
+};
diff --git a/src/ppd-driver-fake.c b/src/ppd-driver-fake.c
index ecd6154..30a03fc 100644
--- a/src/ppd-driver-fake.c
+++ b/src/ppd-driver-fake.c
@@ -18,7 +18,7 @@ void restart_profile_drivers (void);
 
 struct _PpdDriverFake
 {
-  PpdDriver  parent_instance;
+  PpdDriverCpu  parent_instance;
 
   gboolean tio_set;
   struct termios old_tio;
@@ -27,7 +27,7 @@ struct _PpdDriverFake
   gboolean degraded;
 };
 
-G_DEFINE_TYPE (PpdDriverFake, ppd_driver_fake, PPD_TYPE_DRIVER)
+G_DEFINE_TYPE (PpdDriverFake, ppd_driver_fake, PPD_TYPE_DRIVER_CPU)
 
 static GObject*
 ppd_driver_fake_constructor (GType                  type,
diff --git a/src/ppd-driver-fake.h b/src/ppd-driver-fake.h
index 6ab2f82..49a2c2b 100644
--- a/src/ppd-driver-fake.h
+++ b/src/ppd-driver-fake.h
@@ -9,7 +9,7 @@
 
 #pragma once
 
-#include "ppd-driver.h"
+#include "ppd-driver-cpu.h"
 
 #define PPD_TYPE_DRIVER_FAKE (ppd_driver_fake_get_type())
-G_DECLARE_FINAL_TYPE(PpdDriverFake, ppd_driver_fake, PPD, DRIVER_FAKE, PpdDriver)
+G_DECLARE_FINAL_TYPE(PpdDriverFake, ppd_driver_fake, PPD, DRIVER_FAKE, PpdDriverCpu)
diff --git a/src/ppd-driver-intel-pstate.c b/src/ppd-driver-intel-pstate.c
index 912850a..3307ee4 100644
--- a/src/ppd-driver-intel-pstate.c
+++ b/src/ppd-driver-intel-pstate.c
@@ -25,7 +25,7 @@
 
 struct _PpdDriverIntelPstate
 {
-  PpdDriver  parent_instance;
+  PpdDriverCpu  parent_instance;
 
   PpdProfile activated_profile;
   GList *epp_devices; /* GList of paths */
@@ -35,7 +35,7 @@ struct _PpdDriverIntelPstate
   char *no_turbo_path;
 };
 
-G_DEFINE_TYPE (PpdDriverIntelPstate, ppd_driver_intel_pstate, PPD_TYPE_DRIVER)
+G_DEFINE_TYPE (PpdDriverIntelPstate, ppd_driver_intel_pstate, PPD_TYPE_DRIVER_CPU)
 
 static gboolean ppd_driver_intel_pstate_activate_profile (PpdDriver                   *driver,
                                                           PpdProfile                   profile,
@@ -143,7 +143,7 @@ logind_proxy_signal_cb (GDBusProxy  *proxy,
     return;
 
   g_debug ("System woke up from suspend, re-applying energy_perf_bias");
-  ret = ppd_driver_intel_pstate_activate_profile (PPD_DRIVER (pstate),
+  ret = ppd_driver_intel_pstate_activate_profile (PPD_DRIVER(pstate),
                                                   pstate->activated_profile,
                                                   PPD_PROFILE_ACTIVATION_REASON_RESUME,
                                                   &error);
diff --git a/src/ppd-driver-intel-pstate.h b/src/ppd-driver-intel-pstate.h
index 42f8cf2..10ad645 100644
--- a/src/ppd-driver-intel-pstate.h
+++ b/src/ppd-driver-intel-pstate.h
@@ -9,7 +9,7 @@
 
 #pragma once
 
-#include "ppd-driver.h"
+#include "ppd-driver-cpu.h"
 
 #define PPD_TYPE_DRIVER_INTEL_PSTATE (ppd_driver_intel_pstate_get_type())
-G_DECLARE_FINAL_TYPE(PpdDriverIntelPstate, ppd_driver_intel_pstate, PPD, DRIVER_INTEL_PSTATE, PpdDriver)
+G_DECLARE_FINAL_TYPE(PpdDriverIntelPstate, ppd_driver_intel_pstate, PPD, DRIVER_INTEL_PSTATE, PpdDriverCpu)
diff --git a/src/ppd-driver-placeholder.c b/src/ppd-driver-placeholder.c
index 11d9e93..58c75d1 100644
--- a/src/ppd-driver-placeholder.c
+++ b/src/ppd-driver-placeholder.c
@@ -11,10 +11,10 @@
 
 struct _PpdDriverPlaceholder
 {
-  PpdDriver  parent_instance;
+  PpdDriverPlatform  parent_instance;
 };
 
-G_DEFINE_TYPE (PpdDriverPlaceholder, ppd_driver_placeholder, PPD_TYPE_DRIVER)
+G_DEFINE_TYPE (PpdDriverPlaceholder, ppd_driver_placeholder, PPD_TYPE_DRIVER_PLATFORM)
 
 static GObject*
 ppd_driver_placeholder_constructor (GType                  type,
diff --git a/src/ppd-driver-placeholder.h b/src/ppd-driver-placeholder.h
index a822790..f18ea01 100644
--- a/src/ppd-driver-placeholder.h
+++ b/src/ppd-driver-placeholder.h
@@ -9,7 +9,7 @@
 
 #pragma once
 
-#include "ppd-driver.h"
+#include "ppd-driver-platform.h"
 
 #define PPD_TYPE_DRIVER_PLACEHOLDER (ppd_driver_placeholder_get_type())
-G_DECLARE_FINAL_TYPE(PpdDriverPlaceholder, ppd_driver_placeholder, PPD, DRIVER_PLACEHOLDER, PpdDriver)
+G_DECLARE_FINAL_TYPE(PpdDriverPlaceholder, ppd_driver_placeholder, PPD, DRIVER_PLACEHOLDER, PpdDriverPlatform)
diff --git a/src/ppd-driver-platform-profile.c b/src/ppd-driver-platform-profile.c
index aebc655..f90da57 100644
--- a/src/ppd-driver-platform-profile.c
+++ b/src/ppd-driver-platform-profile.c
@@ -32,7 +32,7 @@ struct _PpdDriverPlatformProfile
   guint acpi_platform_profile_changed_id;
 };
 
-G_DEFINE_TYPE (PpdDriverPlatformProfile, ppd_driver_platform_profile, PPD_TYPE_DRIVER)
+G_DEFINE_TYPE (PpdDriverPlatformProfile, ppd_driver_platform_profile, PPD_TYPE_DRIVER_PLATFORM)
 
 static GObject*
 ppd_driver_platform_profile_constructor (GType                  type,
diff --git a/src/ppd-driver-platform-profile.h b/src/ppd-driver-platform-profile.h
index 916fd7e..320f9c7 100644
--- a/src/ppd-driver-platform-profile.h
+++ b/src/ppd-driver-platform-profile.h
@@ -9,7 +9,7 @@
 
 #pragma once
 
-#include "ppd-driver.h"
+#include "ppd-driver-platform.h"
 
 #define PPD_TYPE_DRIVER_PLATFORM_PROFILE (ppd_driver_platform_profile_get_type())
-G_DECLARE_FINAL_TYPE(PpdDriverPlatformProfile, ppd_driver_platform_profile, PPD, DRIVER_PLATFORM_PROFILE, PpdDriver)
+G_DECLARE_FINAL_TYPE(PpdDriverPlatformProfile, ppd_driver_platform_profile, PPD, DRIVER_PLATFORM_PROFILE, PpdDriverPlatform)
diff --git a/src/ppd-driver-platform.c b/src/ppd-driver-platform.c
new file mode 100644
index 0000000..66668b9
--- /dev/null
+++ b/src/ppd-driver-platform.c
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2023 Mario Limonciello <superm1@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3 as published by
+ * the Free Software Foundation.
+ *
+ */
+
+#include "ppd-driver-platform.h"
+
+G_DEFINE_TYPE (PpdDriverPlatform, ppd_driver_platform, PPD_TYPE_DRIVER)
+
+/**
+ * SECTION:ppd-driver-platform
+ * @Short_description: Profile Drivers
+ * @Title: Platform Profile Drivers
+ *
+ * Profile drivers are the implementation of the different profiles for
+ * the whole system. A driver will need to implement support `power-saver`
+ * and `balanced` at a minimum.
+ *
+ * If no system-specific platform driver is available, a placeholder driver
+ * will be put in place, and the `performance` profile will be unavailable.
+ *
+ * There should not be a need to implement system-specific drivers, as the
+ * [`platform_profile`](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/ABI/testing/sysfs-platform_profile)
+ * kernel API offers a way to implement system-specific profiles which
+ * `power-profiles-daemon` can consume.
+ *
+ * When a driver implements the `performance` profile, it might set the
+ * #PpdDriver:performance-degraded property if the profile isn't running to
+ * its fullest performance for any reason, such as thermal limits being
+ * reached, or because a part of the user's body is too close for safety,
+ * for example.
+ */
+
+static void
+ppd_driver_platform_finalize (GObject *object)
+{
+  G_OBJECT_CLASS (ppd_driver_platform_parent_class)->finalize (object);
+}
+
+static void
+ppd_driver_platform_class_init (PpdDriverPlatformClass *klass)
+{
+  GObjectClass *object_class;
+
+  object_class = G_OBJECT_CLASS(klass);
+  object_class->finalize = ppd_driver_platform_finalize;
+}
+
+static void
+ppd_driver_platform_init (PpdDriverPlatform *self)
+{
+}
\ No newline at end of file
diff --git a/src/ppd-driver-platform.h b/src/ppd-driver-platform.h
new file mode 100644
index 0000000..123c255
--- /dev/null
+++ b/src/ppd-driver-platform.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2023 Mario Limonciello <superm1@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3 as published by
+ * the Free Software Foundation.
+ *
+ */
+
+#pragma once
+
+#include "ppd-driver.h"
+
+#define PPD_TYPE_DRIVER_PLATFORM (ppd_driver_platform_get_type())
+G_DECLARE_DERIVABLE_TYPE(PpdDriverPlatform, ppd_driver_platform, PPD, DRIVER_PLATFORM, PpdDriver)
+
+/**
+ * PpdDriverPlatformClass:
+ * @parent_class: The parent class.
+ *
+ * New Platform drivers should derive from #PpdDriverPlatform and implement
+ * at least one of @probe() and @activate_profile.
+ */
+struct _PpdDriverPlatformClass
+{
+  PpdDriverClass   parent_class;
+};
+
+
diff --git a/src/ppd-driver.c b/src/ppd-driver.c
index 9a1f369..db9e335 100644
--- a/src/ppd-driver.c
+++ b/src/ppd-driver.c
@@ -19,13 +19,7 @@
  * the whole system. A driver will need to implement support `power-saver`
  * and `balanced` at a minimum.
  *
- * If no system-specific driver is available, a placeholder driver
- * will be put in place, and the `performance` profile will be unavailable.
- *
- * There should not be a need to implement system-specific drivers, as the
- * [`platform_profile`](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/ABI/testing/sysfs-platform_profile)
- * kernel API offers a way to implement system-specific profiles which
- * `power-profiles-daemon` can consume.
+ * All drivers should be derived from either #PpdDriverCpu or #PpdDriverPlatform
  *
  * When a driver implements the `performance` profile, it might set the
  * #PpdDriver:performance-degraded property if the profile isn't running to
@@ -117,7 +111,6 @@ ppd_driver_finalize (GObject *object)
 
   priv = PPD_DRIVER_GET_PRIVATE (PPD_DRIVER (object));
   g_clear_pointer (&priv->driver_name, g_free);
-  g_clear_pointer (&priv->performance_degraded, g_free);
 
   G_OBJECT_CLASS (ppd_driver_parent_class)->finalize (object);
 }
@@ -191,9 +184,8 @@ ppd_driver_class_init (PpdDriverClass *klass)
                                                       PPD_TYPE_PROFILE,
                                                       0,
                                                       G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
-
   /**
-   * PpdDriver:performance-degraded:
+   * PpdPlatformDriver:performance-degraded:
    *
    * If set to a non-%NULL value, the reason why the performance profile is unavailable.
    * The value must be one of the options listed in the D-Bus API reference.
@@ -204,6 +196,7 @@ ppd_driver_class_init (PpdDriverClass *klass)
                                                        "Why the performance profile is degraded, if set",
                                                        NULL,
                                                        G_PARAM_READWRITE));
+
 }
 
 static void
@@ -270,29 +263,6 @@ ppd_driver_get_selected (PpdDriver *driver)
   return priv->selected;
 }
 
-const char *
-ppd_driver_get_performance_degraded (PpdDriver *driver)
-{
-  PpdDriverPrivate *priv;
-
-  g_return_val_if_fail (PPD_IS_DRIVER (driver), NULL);
-
-  priv = PPD_DRIVER_GET_PRIVATE (driver);
-  return priv->performance_degraded ? priv->performance_degraded : "";
-}
-
-gboolean
-ppd_driver_is_performance_degraded (PpdDriver *driver)
-{
-  PpdDriverPrivate *priv;
-
-  g_return_val_if_fail (PPD_IS_DRIVER (driver), FALSE);
-
-  priv = PPD_DRIVER_GET_PRIVATE (driver);
-
-  return (priv->performance_degraded != NULL);
-}
-
 void
 ppd_driver_emit_profile_changed (PpdDriver  *driver,
                                  PpdProfile  profile)
@@ -323,3 +293,26 @@ ppd_profile_activation_reason_to_str (PpdProfileActivationReason reason)
     g_assert_not_reached ();
   }
 }
+
+const char *
+ppd_driver_get_performance_degraded (PpdDriver *driver)
+{
+  PpdDriverPrivate *priv;
+
+  g_return_val_if_fail (PPD_IS_DRIVER (driver), NULL);
+
+  priv = PPD_DRIVER_GET_PRIVATE (driver);
+  return priv->performance_degraded ? priv->performance_degraded : "";
+}
+
+gboolean
+ppd_driver_is_performance_degraded (PpdDriver *driver)
+{
+  PpdDriverPrivate *priv;
+
+  g_return_val_if_fail (PPD_IS_DRIVER (driver), FALSE);
+
+  priv = PPD_DRIVER_GET_PRIVATE (driver);
+
+  return (priv->performance_degraded != NULL);
+}
diff --git a/src/ppd-driver.h b/src/ppd-driver.h
index f1e0f63..f05fbb6 100644
--- a/src/ppd-driver.h
+++ b/src/ppd-driver.h
@@ -64,8 +64,9 @@ typedef enum{
  * @probe: Called by the daemon on startup.
  * @activate_profile: Called by the daemon for every profile change.
  *
- * New profile drivers should derive from #PpdDriver and implement
- * at least one of probe() and @activate_profile.
+ * New profile drivers should not derive from #PpdDriver.  They should
+ * derive from the child from #PpdDriverCpu or #PpdDriverPlatform drivers
+ * and implement at least one of probe() and @activate_profile.
  */
 struct _PpdDriverClass
 {
diff --git a/tests/integration-test.py b/tests/integration-test.py
index 549ef94..68d50ae 100755
--- a/tests/integration-test.py
+++ b/tests/integration-test.py
@@ -324,8 +324,8 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 2)
-      self.assertEqual(profiles[1]['Driver'], 'placeholder')
-      self.assertEqual(profiles[0]['Driver'], 'placeholder')
+      self.assertEqual(profiles[1]['PlatformDriver'], 'placeholder')
+      self.assertEqual(profiles[0]['PlatformDriver'], 'placeholder')
       self.assertEqual(profiles[1]['Profile'], 'balanced')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
 
@@ -355,6 +355,45 @@ class Tests(dbusmock.DBusTestCase):
       self.assertEqual(len(profiles), 3)
       self.assertEqual(self.get_dbus_property('PerformanceInhibited'), '')
 
+    def test_multi_degredation(self):
+      '''Test handling of degradation from multiple drivers'''
+      self.create_dytc_device()
+      self.create_platform_profile()
+
+      # Create CPU with preference
+      dir1 = os.path.join(self.testbed.get_root_dir(), "sys/devices/system/cpu/cpufreq/policy0/")
+      os.makedirs(dir1)
+      with open(os.path.join(dir1, 'scaling_governor'), 'w') as gov:
+        gov.write('powersave\n')
+      with open(os.path.join(dir1, "energy_performance_preference"),'w') as prefs:
+        prefs.write("performance\n")
+
+      # Create Intel P-State configuration
+      pstate_dir = os.path.join(self.testbed.get_root_dir(), "sys/devices/system/cpu/intel_pstate")
+      os.makedirs(pstate_dir)
+      with open(os.path.join(pstate_dir, "no_turbo"),'w') as no_turbo:
+        no_turbo.write("0\n")
+      with open(os.path.join(pstate_dir, "status"),'w') as status:
+        status.write("active\n")
+
+      self.start_daemon()
+
+      # Set performance mode
+      self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('performance'))
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'performance')
+
+      # Degraded CPU
+      with open(os.path.join(pstate_dir, "no_turbo"),'w') as no_turbo:
+        no_turbo.write("1\n")
+      self.assertEventually(lambda: self.have_text_in_log('File monitor change happened for '))
+
+      self.assertEqual(self.get_dbus_property('PerformanceDegraded'), 'high-operating-temperature')
+
+      # Degraded DYTC
+      self.testbed.set_attribute(self.tp_acpi, 'dytc_lapmode', '1\n')
+      self.assertEventually(lambda: self.have_text_in_log('dytc_lapmode is now on'))
+      self.assertEqual(self.get_dbus_property('PerformanceDegraded'), 'high-operating-temperature,lap-detected')
+
     def test_degraded_transition(self):
       '''Test that transitions work as expected when degraded'''
 
@@ -408,7 +447,7 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'intel_pstate')
+      self.assertEqual(profiles[0]['CpuDriver'], 'intel_pstate')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
 
       contents = None
@@ -435,13 +474,14 @@ class Tests(dbusmock.DBusTestCase):
 
       self.stop_daemon()
 
-      # Verify that the Lenovo DYTC driver still gets preferred
+      # Verify that Lenovo DYTC and Intel P-State drivers are loaded
       self.create_platform_profile()
       self.start_daemon()
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'platform_profile')
+      self.assertEqual(profiles[0]['CpuDriver'], 'intel_pstate')
+      self.assertEqual(profiles[0]['PlatformDriver'], 'platform_profile')
 
     def test_intel_pstate_balance(self):
       '''Intel P-State driver (balance)'''
@@ -470,7 +510,7 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'intel_pstate')
+      self.assertEqual(profiles[0]['CpuDriver'], 'intel_pstate')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
 
       contents = None
@@ -545,7 +585,7 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 2)
-      self.assertEqual(profiles[0]['Driver'], 'placeholder')
+      self.assertEqual(profiles[0]['PlatformDriver'], 'placeholder')
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
 
       contents = None
@@ -590,7 +630,7 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'intel_pstate')
+      self.assertEqual(profiles[0]['CpuDriver'], 'intel_pstate')
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
 
       # Set power-saver mode
@@ -613,6 +653,77 @@ class Tests(dbusmock.DBusTestCase):
 
       self.stop_daemon()
 
+    def test_multi_driver_flows(self):
+      '''Test corner cases associated with multiple drivers'''
+
+      # Create 2 CPUs with preferences
+      dir1 = os.path.join(self.testbed.get_root_dir(), "sys/devices/system/cpu/cpufreq/policy0/")
+      os.makedirs(dir1)
+      with open(os.path.join(dir1, 'scaling_governor'), 'w') as f:
+        f.write('powersave\n')
+      prefs1 = os.path.join(dir1, "energy_performance_preference")
+      with open(prefs1,'w') as f:
+        f.write("performance\n")
+
+      dir2 = os.path.join(self.testbed.get_root_dir(), "sys/devices/system/cpu/cpufreq/policy1/")
+      os.makedirs(dir2)
+      with open(os.path.join(dir2, 'scaling_governor'), 'w') as f:
+        f.write('powersave\n')
+      prefs2 = os.path.join(dir2, "energy_performance_preference")
+      with open(prefs2,'w') as f:
+        f.write("performance\n")
+
+      # Create AMD P-State configuration
+      pstate_dir = os.path.join(self.testbed.get_root_dir(), "sys/devices/system/cpu/amd_pstate")
+      os.makedirs(pstate_dir)
+      with open(os.path.join(pstate_dir, "status"),'w') as status:
+        status.write("active\n")
+
+      # create ACPI platform profile
+      self.create_platform_profile()
+      profile = os.path.join(self.testbed.get_root_dir(), "sys/firmware/acpi/platform_profile")
+
+      self.start_daemon()
+
+      # Verify that both drivers are loaded
+      profiles = self.get_dbus_property('Profiles')
+      self.assertEqual(len(profiles), 3)
+      self.assertEqual(profiles[0]['CpuDriver'], 'amd_pstate')
+      self.assertEqual(profiles[0]['PlatformDriver'], 'platform_profile')
+
+      # test both drivers can switch to power-saver
+      self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('power-saver'))
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'power-saver')
+
+      # test both drivers can switch to performance
+      self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('performance'))
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'performance')
+
+      # test both drivers can switch to balanced
+      self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('balanced'))
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+
+      # test when CPU driver fails to write
+      self.change_immutable(prefs1, True)
+      with self.assertRaises(gi.repository.GLib.GError):
+        self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('power-saver'))
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.read_sysfs_file("sys/firmware/acpi/platform_profile"), b'balanced')
+      self.change_immutable(prefs1, False)
+
+      # test when platform driver fails to write
+      self.change_immutable(profile, True)
+      with self.assertRaises(gi.repository.GLib.GError):
+        self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('power-saver'))
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+
+      # make sure CPU was undone since platform failed
+      self.assertEqual(self.read_sysfs_file("sys/devices/system/cpu/cpufreq/policy0/energy_performance_preference"), b'balance_performance')
+      self.assertEqual(self.read_sysfs_file("sys/devices/system/cpu/cpufreq/policy1/energy_performance_preference"), b'balance_performance')
+      self.change_immutable(profile, False)
+
+      self.stop_daemon()
+
     def test_amd_pstate(self):
       '''AMD P-State driver (no UPower)'''
 
@@ -640,7 +751,7 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'amd_pstate')
+      self.assertEqual(profiles[0]['CpuDriver'], 'amd_pstate')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
 
       contents = None
@@ -659,14 +770,6 @@ class Tests(dbusmock.DBusTestCase):
 
       self.stop_daemon()
 
-      # Verify that the Lenovo DYTC driver still gets preferred
-      self.create_platform_profile()
-      self.start_daemon()
-
-      profiles = self.get_dbus_property('Profiles')
-      self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'platform_profile')
-
     def test_amd_pstate_balance(self):
       '''AMD P-State driver (balance)'''
 
@@ -694,7 +797,7 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'amd_pstate')
+      self.assertEqual(profiles[0]['CpuDriver'], 'amd_pstate')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
 
       contents = None
@@ -767,7 +870,7 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 2)
-      self.assertEqual(profiles[0]['Driver'], 'placeholder')
+      self.assertEqual(profiles[0]['PlatformDriver'], 'placeholder')
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
 
       contents = None
@@ -795,9 +898,9 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'platform_profile')
+      self.assertEqual(profiles[0]['PlatformDriver'], 'platform_profile')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
-      self.assertEqual(profiles[2]['Driver'], 'platform_profile')
+      self.assertEqual(profiles[2]['PlatformDriver'], 'platform_profile')
       self.assertEqual(profiles[2]['Profile'], 'performance')
       self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('performance'))
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'performance')
@@ -938,7 +1041,7 @@ class Tests(dbusmock.DBusTestCase):
       self.start_daemon()
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'platform_profile')
+      self.assertEqual(profiles[0]['PlatformDriver'], 'platform_profile')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
       self.assertEqual(self.read_sysfs_file("sys/firmware/acpi/platform_profile"), b'cool')
@@ -964,7 +1067,7 @@ class Tests(dbusmock.DBusTestCase):
       self.start_daemon()
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(profiles[0]['Driver'], 'platform_profile')
+      self.assertEqual(profiles[0]['PlatformDriver'], 'platform_profile')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
       self.assertEqual(self.read_sysfs_file("sys/firmware/acpi/platform_profile"), b'balanced')
-- 
GitLab

