#!/usr/bin/env python

import argparse
import subprocess
import tempfile
import shutil
import os
import pathlib
import logging

logging.getLogger().setLevel(logging.INFO)

parser = argparse.ArgumentParser(
    prog="remote-install",
    description="install NixOS remotely",
)

parser.add_argument("--name", required=True)
parser.add_argument("--host", required=True)

args = parser.parse_args()

nix = shutil.which("nix")
ssh = shutil.which("ssh")
sops = shutil.which("sops")

with tempfile.TemporaryDirectory() as tmpdir:
    tmpdir = pathlib.Path(tmpdir)

    def build(attr):
        outlink = tmpdir / attr

        logging.info(f"building {attr} of {args.name}")
        subprocess.run(
            [
                nix,
                "build",
                f".#nixosConfigurations.{args.name}.config.system.build.{attr}",
                "--out-link",
                outlink,
            ],
            check=True,
        )

        return os.path.realpath(outlink)

    disko = build("diskoScript")
    toplevel = build("toplevel")
    install = build("nixos-install")

    logging.info(f"copying diskoScript and nixos-install to {args.name}")
    subprocess.run(
        [
            nix,
            "copy",
            "--no-check-sigs",
            "--to",
            f"ssh-ng://{args.host}",
            disko,
            install,
        ],
        check=True,
    )

    logging.info(f"running diskoScript on {args.name}")
    subprocess.run(
        [ssh, args.host, disko],
        check=True,
    )

    logging.info(f"copying toplevel to {args.name}")
    subprocess.run(
        [
            nix,
            "copy",
            "--no-check-sigs",
            "--to",
            f"ssh-ng://{args.host}?remote-store=local?root=/mnt",
            toplevel,
        ],
        check=True,
    )

    logging.info(f"running nixos-install on {args.name}")
    subprocess.run(
        [
            ssh,
            args.host,
            pathlib.Path(install) / "bin" / "nixos-install",
            "--root",
            "/mnt",
            "--system",
            toplevel,
            "--no-channel-copy",
            "--no-root-passwd",
        ],
        check=True,
    )

    logging.info(f"copying key to {args.name}")
    key = subprocess.run(
        [
            sops,
            "-d",
            "--extract",
            '["nixos"]["key"]',
            "secrets.yaml",
        ],
        stdout=subprocess.PIPE,
        check=True,
    )
    subprocess.run(
        [
            ssh,
            args.host,
            "install",
            "-Dm400",
            "/dev/stdin",
            "/mnt/persist/var/lib/sops.key",
        ],
        input=key.stdout,
        check=True,
    )

    logging.info(f"rebooting {args.name}")
    subprocess.run(
        [ssh, args.host, "reboot"],
        check=True,
    )
